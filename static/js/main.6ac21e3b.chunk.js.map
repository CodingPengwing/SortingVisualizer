{"version":3,"sources":["styles/Selector.module.scss","styles/App.module.scss","SortingVisualizer/SortingVisualizer.module.scss","styles/NavBar.module.scss","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/cocktailShakerSort.js","sortingAlgorithms/gnomeSort.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/insertionSort.js","sortingAlgorithms/introSort.js","sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/util.js","sortingAlgorithms/quickSortOptimized.js","sortingAlgorithms/selectionSort.js","sortingAlgorithms/shellSort.js","sortingAlgorithms/timSort.js","sortingAlgorithms/SortingTester.jsx","sortingAlgorithms/bogoSort.js","components/SortingSelector.js","SortingVisualizer/SortingVisualizer.jsx","components/WelcomeHeader.js","components/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","addToHistory","range","start","end","array","i","push","slice","randomIntFromInterval","min","max","Math","floor","random","swap","j","isSorted","sorted","length","shuffle","temp","sort","props","sortedArray","highlights","bubbleSort","lowerLimit","upperLimit","cocktailShakerSort","gnomeSort","unshift","n","heapSize","maxHeapify","bottomUpHeapify","shiftThenAddToHistory","shift","heapSort","leftChild","rightChild","largest","insertionSort","depthLimit","log2","introSort","arrayLength","offset","p","pivot","partition","mergeSort","len","splitIdx","ceil","mergeArray","k","merge","quickSort","pivotLeft","pivotRight","pivotIndex","mid","pivotRange","startIndex","minVal","minIndex","selectionSort","h","key","shellSort","minRun","r","calculateMinRun","size","split","timSort","testSort","sortingAlgorithm","success","randomArray","arraysAreEqual","a","b","console","log","array1","array2","permutations","perm","bogoSort","xs","output","rest","concat","StyledButton","styled","Button","marginRight","fontFamily","fontSize","textAlign","textTransform","backgroundSize","transition","color","width","boxShadow","cursor","backgroundImage","backgroundPosition","StyledButton2","PauseButton","ResumeButton","Selector","useState","STEADY_ARRAY","inputType","setInputType","QUICK_SORT","sortType","setSortType","changeInput","type","onChangeInput","changeSort","onChangeSort","className","styles","container","sliders","sliderDropdown","Typography","gutterBottom","style","marginTop","DropdownButton","id","title","Dropdown","Item","onClick","RANDOM_ARRAY","SORTED_ARRAY","REVERSE_SORTED_ARRAY","UNIFORM_ARRAY","PARTIAL_UNIFORM_ARRAY","marginLeft","Slider","onChange","e","val","onChangeSize","defaultValue","disableSlider","valueLabelDisplay","disabled","step","Header","BOGO_SORT","BUBBLE_SORT","COCKTAIL_SORT","GNOME_SORT","INSERTION_SORT","SELECTION_SORT","SHELL_SORT","HEAP_SORT","MERGE_SORT","QUICK_SORT_OPTIMIZED","INTRO_SORT","TIM_SORT","onChangeSpeed","buttons","buttonStyle","pause","resume","reset","MAX_VALUE","Bar","highlighted","arrayBar","height","value","backgroundColor","idx","Array","this","includes","bars","renderBar","React","Component","SortingVisualizer","state","arraySize","arrayType","timeoutIDArray","resumePoint","animationSpeed","animationPauseTime","history","clearHistory","clearForwardHistory","generateArray","bind","doSort","onChangeArraySize","onChangeSortSpeed","quickSortOptimized","testSortingAlgorithms","setState","minValue","maxValue","gap","generateRandomArray","multipliers","generateSteadyArray","generateSortedArray","generateReverseSortedArray","generateUniformArray","values","generatePartialUniformArray","originalArray","arrLen","clearTimeout","animateHistory","startPoint","count","timeoutID","setTimeout","speed","arrayContainer","WelcomeHeader","welcomediv","delay","welcome2","navbar","author","icons","href","AiOutlineGithub","padding","App","AppStyles","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ac21e3b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Selector_container__3vhKK\",\"selector\":\"Selector_selector__2W_gv\",\"sliders\":\"Selector_sliders__3o2ev\",\"sliderDropdown\":\"Selector_sliderDropdown__3Ubdx\",\"buttons\":\"Selector_buttons__1RrtI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2Fx1V\",\"welcomediv\":\"App_welcomediv__WrbDi\",\"welcome\":\"App_welcome__1OqrH\",\"welcome2\":\"App_welcome2__2dCac\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrayContainer\":\"SortingVisualizer_arrayContainer__ci01s\",\"arrayBar\":\"SortingVisualizer_arrayBar__328_G\",\"buttons\":\"SortingVisualizer_buttons__3oTjY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"NavBar_navbar__3_lUG\",\"author\":\"NavBar_author__2A4cE\",\"icons\":\"NavBar_icons__ZsK-g\"};","import { swap } from './util';\n\nvar addToHistory;\n\nexport function sort(props) {\n    addToHistory = props.addToHistory;\n    const sortedArray = bubbleSort(props.array);\n    addToHistory({array: sortedArray.slice(), highlights: []});\n    return sortedArray.slice();\n}\n\nfunction bubbleSort(array) {\n    if (array.length <= 1) return array;\n    let sorted = false;\n    while (!sorted) {\n        sorted = true;\n        for (let i=1; i<array.length; i++) {\n            addToHistory({array: array.slice(), highlights: [i-1, i]});\n            if (array[i-1] > array[i]) {\n                swap(array, i-1, i);\n                addToHistory({array: array.slice(), highlights: [i-1, i]});\n                sorted = false;\n            }\n        }\n    }\n    return array;\n}\n","import { swap } from './util';\n\nvar addToHistory;\n\nexport function sort(props) {\n    addToHistory = props.addToHistory;\n    const sortedArray = cocktailShakerSort(props.array);\n    addToHistory({array: sortedArray.slice(), highlights: []});\n    return sortedArray.slice();\n}\n\nfunction cocktailShakerSort(array) {\n    if (array.length <= 1) return array;\n\n    let sorted = false;\n    let i;\n    let lowerLimit = 0;\n    let upperLimit = array.length - 1;\n\n    while (!sorted && lowerLimit < upperLimit) {\n        sorted = true;\n        i = lowerLimit+1;\n        while (i <= upperLimit) {\n            addToHistory({array: array.slice(), highlights: [i-1, i]});\n            if (array[i-1] > array[i]) {\n                swap(array, i-1, i);\n                sorted = false;\n                addToHistory({array: array.slice(), highlights: [i-1, i]});\n            }\n            i++;\n        }\n        upperLimit--;\n        if (sorted) { break; }\n        \n        sorted = true;\n        i = upperLimit;\n        while (i > lowerLimit) {\n            addToHistory({array: array.slice(), highlights: [i-1, i]});\n            if (array[i-1] > array[i]) {\n                swap(array, i-1, i);\n                sorted = false;\n                addToHistory({array: array.slice(), highlights: [i-1, i]});\n            }\n            i--;\n        }\n        lowerLimit++;\n        if (sorted) { break; }\n    }\n\n    return array;\n}\n","import { swap } from \"./util\";\n\nvar addToHistory;\n\nexport function sort(props) {\n    addToHistory = props.addToHistory;\n    const sortedArray = gnomeSort(props.array);\n    addToHistory({array: sortedArray.slice(), highlights: []});\n    return sortedArray.slice();\n}\n\nfunction gnomeSort(array) {\n    if (array.length <= 1) return array;\n    let i = 1;\n    while (i < array.length) {\n        addToHistory({array: array.slice(), highlights: [i-1, i]});\n        if (array[i-1] <= array[i]) { i++; }\n        else {\n            swap(array, i-1, i);\n            addToHistory({array: array.slice(), highlights: [i-1, i]});\n            if (i > 1) { i--; }\n        }\n    }\n    return array;\n}\n","import { swap } from \"./util\";\n\nvar addToHistory;\n\nexport function sort(props) {\n    addToHistory = props.addToHistory;\n    const sortedArray = heapSort(props.array);\n    addToHistory({array: sortedArray.slice(), highlights: []});\n    return sortedArray.slice();\n}\n\n// We have to remove the sentinel every time we add to history.\n// All the highlight indices have been shifted -1 because of the removal of the sentinel.\nfunction shiftThenAddToHistory(props) {\n    props.array.shift();\n    for (let i = 0; i < props.highlights.length; i++) {\n        props.highlights[i] -= 1;\n    }\n    addToHistory({array: props.array, highlights: props.highlights});\n}\n\n\n\n\n// ---------------------------- HEAP SORT ---------------------------- //\n\nfunction heapSort(array) {\n    if (array.length <= 1) return array;\n\n    // Add sentinel to top of list\n    array.unshift(null);\n    bottomUpHeapify(array);\n\n    let heapSize = array.length;\n    for (let i = array.length-1; i > 0; i--) {\n        shiftThenAddToHistory({array: array.slice(), highlights: [1, i]});\n        swap(array, 1, i);\n        shiftThenAddToHistory({array: array.slice(), highlights: [1, i]});\n\n        // Decrease the heapSize every time we eject an element to the bottom of the array.\n        heapSize -= 1;\n        maxHeapify(array, 1, heapSize);\n    }\n\n    // Remove the sentinel\n    array.shift();\n    return array;\n}\n\n// Turns the entire array into a heap\nfunction bottomUpHeapify(array) {\n    const n = array.length;\n    const heapSize = n;\n    for (let i = Math.floor(n/2); i > 0; i--) {\n        maxHeapify(array, i, heapSize);\n    }\n}\n\n// Ensures that all elements related to index i satisfy the conditions of a heap.\nfunction maxHeapify(array, i, heapSize) {\n    // If this element has no children\n    if (i * 2 >= heapSize) return;\n\n    // Find the children of this element\n    let leftChild = 2 * i;\n    // rightChild = leftChild if this element only has one child\n    let rightChild = (2 * i + 1 < heapSize) ? 2 * i + 1 : leftChild;\n\n    // Find the largest element between the parent, left and right children.\n    shiftThenAddToHistory({array: array.slice(), highlights: [i, leftChild, rightChild]});\n    let largest = i;\n    if (array[leftChild] > array[i]) {\n        largest = leftChild;\n    }\n    if (array[rightChild] > array[largest]) {\n        largest = rightChild;\n    }\n\n    // Swap elements if a child is bigger than the parent\n    if (largest !== i) {\n        swap(array, i, largest);\n        shiftThenAddToHistory({array: array.slice(), highlights: [i, largest]});\n        // Heapify again for the child's children\n        maxHeapify(array, largest, heapSize);\n    }\n}\n","import { swap } from \"./util\";\n\nvar addToHistory;\n\nexport function sort(props) {\n    addToHistory = props.addToHistory;\n    const sortedArray = insertionSort(props.array);\n    addToHistory({array: sortedArray.slice(), highlights: []});\n    return sortedArray.slice();\n}\n\nfunction insertionSort(array) {\n    if (array.length <= 1) return array;\n    for (let i = 1; i < array.length; i++) {\n        let j = i - 1;\n        addToHistory({array: array.slice(), highlights: [j, i]});\n        while (j >= 0 && array[j] > array[j+1]) {\n            swap(array, j, j+1);\n            addToHistory({array: array.slice(), highlights: [j, j+1]});\n            j -= 1;\n        }\n    }\n    return array;\n}\n","import { swap } from \"./util\";\n\nvar addToHistory;\n\nexport function sort(props) {\n    addToHistory = props.addToHistory;\n    const start = 0;\n    const end = props.array.length;\n    // initialise the depthLimit as 2 * log(length(data))\n    const depthLimit = Math.floor(Math.log2(end - start))\n    const sortedArray = introSort(props.array, start, end, depthLimit);\n    addToHistory({array: sortedArray.slice(), highlights: []});\n    return sortedArray.slice();\n}\n\n// Intro sort from start (inclusive) to end (exclusive)\nfunction introSort(array, start, end, depthLimit) {\n    var size = end - start;\n    if (size < 16) {\n        return insertionSort(array, start, end);\n    }\n    if (depthLimit == 0) {\n        return heapSort(array, start, end);\n    }\n    const p = partition(array, start, end);\n    // console.log(depthLimit);\n    introSort(array, start, p, depthLimit-1);\n    introSort(array, p+1, end, depthLimit-1);\n\n    return array;\n}\n\n\n\n\n// ------------------------------------- Heap Sort ------------------------------------- //\n\n// Function to sort an array from start (inclusive) to end (exclusive).\nfunction heapSort(array, start, end) {\n    if (end <= start) return array;\n\n    var arrayLength = end - start + 1;\n    var offset = start - 1;\n    bottomUpHeapify(array, start, end);\n\n    let heapSize = arrayLength;\n    for (let i = arrayLength - 1; i > 0; i--) {\n        addToHistory({array: array.slice(), highlights: [1 + offset, i + offset]});\n        swap(array, 1 + offset, i + offset);\n        addToHistory({array: array.slice(), highlights: [1 + offset, i + offset]});\n\n        // Decrease the heapSize every time we eject an element to the bottom of the array.\n        heapSize -= 1;\n        maxHeapify(array, start, end, 1, heapSize);\n    }\n\n    return array;\n}\n\n// Turns the entire array into a heap\nfunction bottomUpHeapify(array, start, end) {\n    const n = end - start + 1;\n    const heapSize = n;\n    for (let i = Math.floor(n/2); i > 0; i--) {\n        maxHeapify(array, start, end, i, heapSize);\n    }\n}\n\n// Ensures that all elements related to index i satisfy the conditions of a heap.\nfunction maxHeapify(array, start, end, i, heapSize) {\n    var offset = start - 1;\n\n    // If this element has no children\n    if (2 * i >= heapSize) return;\n\n    // Find the children of this element\n    let leftChild = 2 * i;\n    // rightChild = leftChild if this element only has one child\n    let rightChild = (2 * i + 1 < heapSize) ? 2 * i + 1 : leftChild;\n\n    // Find the largest element between the parent, left and right children.\n    addToHistory({array: array.slice(), highlights: [i + offset, leftChild + offset, rightChild + offset]});\n    let largest = i;\n    if (array[leftChild + offset] > array[i + offset]) {\n        largest = leftChild;\n    }\n    if (array[rightChild + offset] > array[largest + offset]) {\n        largest = rightChild;\n    }\n\n    // Swap elements if a child is bigger than the parent\n    if (largest !== i) {\n        swap(array, i + offset, largest + offset);\n        addToHistory({array: array.slice(), highlights: [i + offset, largest + offset]});\n        // Heapify again for the child's children\n        maxHeapify(array, start, end, largest, heapSize);\n    }\n}\n\n\n\n\n// ------------------------------------- Insertion Sort ------------------------------------- //\n\n// insertion sort from start (inclusive) to end (exclusive)\nfunction insertionSort(array, start, end) {\n    if (end <= start) return array;\n\n    // Sort the section using insertion method\n    for (let i = start+1; i < end; i++) {\n        let j = i;\n        addToHistory({array: array.slice(), highlights: [j-1, j]});\n        while (j > start && array[j] < array[j-1]) {\n            swap(array, j-1, j);\n            addToHistory({array: array.slice(), highlights: [j-1, j]});\n            j--;\n        }\n    }\n    return array;\n}\n\n\n\n// ------------------------------------- Partition ------------------------------------- //\n\nfunction partition(array, start, end) {\n    if (end - start <= 1) return start;\n\n    const pivot = array[start];\n    let i = start + 1;\n    let j = end - 1;\n    while (true) {\n        while (array[i] <= pivot && i < j) {\n            addToHistory({array: array.slice(), highlights: [start, i, j]});\n            i += 1;\n        }\n        while (array[j] > pivot && i <= j) {\n            addToHistory({array: array.slice(), highlights: [start, i, j]});\n            j -= 1;\n        }\n        if (i < j) {\n            addToHistory({array: array.slice(), highlights: [start, i, j]});\n            swap(array, i, j);\n            addToHistory({array: array.slice(), highlights: [start, i, j]});\n        } else {\n            break;\n        }\n    }\n    \n    // Swap pivot into position\n    addToHistory({array: array.slice(), highlights: [start, j]});\n    swap(array, start, j)\n    addToHistory({array: array.slice(), highlights: [start, j]});\n    \n    let pivotIndex = j;\n    return pivotIndex;\n}\n","import { range } from './util';\n\nvar addToHistory;\n\nexport function sort(props) {\n    addToHistory = props.addToHistory;\n    const start = 0;\n    const end = props.array.length-1;\n    let sortedArray = mergeSort(props.array, start, end);\n    addToHistory({array: sortedArray.slice(), highlights: []});\n    return sortedArray.slice();\n}\n\n// start is the starting index of the array\n// end is the last index of the array (inclusive)\nfunction mergeSort(array, start, end) {\n    if (end <= start) return array;\n\n    // Split down the middle and recurse left, right\n    const len = end-start+1;\n    const splitIdx = Math.ceil(start + len/2);\n\n    mergeSort(array, start, splitIdx-1);\n    mergeSort(array, splitIdx, end);\n\n    // Only merge the left and right arrays if elements are out of order.\n    if (array[splitIdx-1] >= array[splitIdx]) {\n        merge(array, start, splitIdx, end);\n    }\n\n    addToHistory({array: array.slice(), highlights: range(start, end+1)});\n    return array;\n}\n\nfunction merge(array, start, splitIdx, end) {\n    if (end <= start) return array;\n    \n    let mergeArray = [];\n    let i = start, j = splitIdx;\n    while (i < splitIdx && j <= end) {\n        addToHistory({array: array.slice(), highlights: [i, j]});\n        if (array[i] <= array[j]) {\n            mergeArray.push(array[i++]);\n        } else {\n            mergeArray.push(array[j++]);\n        }\n    }\n    while (i < splitIdx) {\n        addToHistory({array: array.slice(), highlights: [i, j-1]});\n        mergeArray.push(array[i++]);\n    }\n    while (j <= end) {\n        addToHistory({array: array.slice(), highlights: [i-1, j]});\n        mergeArray.push(array[j++]);\n    }\n\n    for (let k = 0; k < mergeArray.length; k++) {\n        addToHistory({array: array.slice(), highlights: [start+k]});\n        array[start+k] = mergeArray[k];\n    }\n\n    return array;\n}\n","import { swap } from \"./util\";\n\nvar addToHistory;\n\nexport function sort(props) {\n    addToHistory = props.addToHistory;\n    const start = 0;\n    const end = props.array.length-1;\n    const sortedArray = quickSort(props.array, start, end);\n    addToHistory({array: sortedArray.slice(), highlights: []});\n    return sortedArray.slice();\n}\n\nfunction quickSort(array, start, end) {\n    if (end <= start) return array;\n    const p = partition(array, start, end);\n    quickSort(array, start, p-1);\n    quickSort(array, p+1, end);\n    return array;\n}\n\nfunction partition(array, start, end) {\n    if (end <= start) return start;\n\n    const pivot = array[start];\n    let i = start + 1;\n    let j = end;\n    while (true) {\n        while (array[i] <= pivot && i < j) {\n            addToHistory({array: array.slice(), highlights: [start, i, j]});\n            i += 1;\n        }\n        while (array[j] > pivot && i <= j) {\n            addToHistory({array: array.slice(), highlights: [start, i, j]});\n            j -= 1;\n        }\n        if (i < j) {\n            addToHistory({array: array.slice(), highlights: [start, i, j]});\n            swap(array, i, j);\n            addToHistory({array: array.slice(), highlights: [start, i, j]});\n        } else {\n            break;\n        }\n    }\n    \n    // Swap pivot into position\n    addToHistory({array: array.slice(), highlights: [start, j]});\n    swap(array, start, j)\n    addToHistory({array: array.slice(), highlights: [start, j]});\n    \n    let pivotIndex = j;\n    return pivotIndex;\n}\n","// Generates an array containing all integers between start (inclusive) and end (exclusive)\nexport function range(start, end) {\n    var array = [];\n    for (let i = start; i < end; i++) { \n        array.push(i); \n    }\n    return array.slice();\n}\n\n// Generates a random integer within the given interval\nexport function randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max-min+1) + min);\n}\n\n// Swap 2 elements at indices i and j in an array\nexport function swap(array, i, j) {\n    [array[i], array[j]] = [array[j], array[i]];\n}\n\n// Checks whether an array is sorted\nexport function isSorted(array) {\n    let sorted = true;\n    for (let i = 0; i < array.length-1; i++) {\n        if (array[i] > array[i+1]) {\n            sorted = false;\n            break;\n        }\n    }\n    return sorted;\n}\n\n/* Randomize array in-place using Durstenfeld shuffle algorithm */\n// https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\nexport function shuffle(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n}\n\nexport function generateRandomArray(arraySize, minValue, maxValue) {\n    const gap = Math.floor((maxValue - minValue) / arraySize);\n    let array = [];\n    for (let i=0; i < arraySize; i++) {\n        array.push(minValue + gap * randomIntFromInterval(0, Math.floor(maxValue/gap)));\n    }\n    return array;\n}\n\nexport function generateSteadyArray(arraySize, minValue, maxValue) {\n    const gap = Math.floor((maxValue - minValue) / arraySize);\n    const multipliers = range(0, arraySize);\n    shuffle(multipliers);\n    let array = [];\n    for (let i = 0; i < multipliers.length; i++) {\n        array.push(minValue + gap * multipliers[i]);\n    }\n    return array;\n}\n\nexport function generateSortedArray(arraySize, minValue, maxValue) {\n    const gap = Math.floor((maxValue - minValue) / arraySize);\n    let array = [];\n    for (let i = 1; i <= arraySize; i++) {\n        array.push(minValue + gap * i);\n    }\n    return array;\n}\n\nexport function generateReverseSortedArray(arraySize, minValue, maxValue) {\n    const gap = Math.floor((maxValue - minValue) / arraySize);\n    let array = [];\n    for (let i = arraySize; i > 0; i--) {\n        array.push(minValue + gap * i);\n    }\n    return array;\n}\n\nexport function generateUniformArray(arraySize, minValue, maxValue) {\n    const value = randomIntFromInterval(Math.floor(maxValue/2), Math.floor(maxValue/4)*3);\n    let array = [];\n    for (let i = 0; i < arraySize; i++) { \n        array[i] = value;\n    }\n    return array;\n}\n\nexport function generatePartialUniformArray(arraySize, minValue, maxValue) {\n    const diffValues = 5;\n    const gap = Math.floor((maxValue - minValue) / diffValues);\n    const values = [];\n    for (let i = 1; i <= diffValues; i++) {\n        values.push(minValue + i * gap);\n    }\n\n    let array = [];\n    for (let i = 0; i < diffValues; i++) {\n        for (let j = 0; j < Math.floor(arraySize/diffValues); j++) {\n            array.push(minValue + values[i]);\n        }\n    }\n\n    while (array.length < arraySize) {\n        array.push(minValue + values[randomIntFromInterval(0, 4)]);\n    }\n    shuffle(array);\n    return array;\n}\n","// Optimizing using 3-way principle\n// https://www.techiedelight.com/quicksort-using-dutch-national-flag-algorithm/\n// https://www.geeksforgeeks.org/3-way-quicksort-dutch-national-flag/\n\n// Optimizing using tail call\n// https://www.geeksforgeeks.org/quicksort-tail-call-optimization-reducing-worst-case-space-log-n/\n\nimport { range, randomIntFromInterval, swap } from './util';\n\nvar addToHistory;\n\nexport function sort(props) {\n    addToHistory = props.addToHistory;\n    const array = props.array;\n    const start = 0;\n    const end = array.length-1;\n    const sortedArray = quickSort(array, start, end);\n    addToHistory({array: sortedArray.slice(), highlights: []});\n    return sortedArray.slice();\n}\n\nfunction quickSort(array, start, end) {\n    // Loop for tail call optimization.\n    while (start < end) {\n        const [pivotLeft, pivotRight] = partition(array, start, end);\n        if (pivotLeft - start < end - pivotRight) {\n            quickSort(array, start, pivotLeft-1);\n            start = pivotRight + 1;\n        }\n        else {\n            quickSort(array, pivotRight+1, end);\n            end = pivotLeft - 1;\n        }\n    }\n    return array;\n}\n\nfunction partition(array, start, end) {\n    if (end <= start) return [start, end];\n\n    //  If this section has more than 5 elements\n    if (end - start + 1 > 5) {\n        // Choose pivot at random to reduce chance of O(n^2) worst case.\n        let pivotIndex = randomIntFromInterval(start, end);\n        addToHistory({array: array.slice(), highlights: [start, pivotIndex]});\n        swap(array, start, pivotIndex);\n        addToHistory({array: array.slice(), highlights: [start, pivotIndex]});\n    }\n\n    let mid = start + 1;\n    let pivot = array[start];\n\n    while (mid <= end) {\n        addToHistory({array: array.slice(), highlights: [start, mid, end]});\n        if (array[mid] < pivot) {\n            swap(array, start, mid);\n            addToHistory({array: array.slice(), highlights: [start, mid]});\n            start++;\n            mid++;\n        } \n        else if (array[mid] > pivot) {\n            swap(array, mid, end);\n            addToHistory({array: array.slice(), highlights: [start, mid, end]});\n            end--;\n        } \n        else {\n            mid++;\n        }\n    }\n    // start is now our left pivot position (inclusive)\n    // end is now our right pivot position (inclusive)\n    // this means that everything within the pivotRange is equal to our pivot\n    if (end - start >= 1) {\n        let pivotRange = range(start, end+1);\n        addToHistory({array: array.slice(), highlights: pivotRange.slice()});\n    }\n    return [start, end];\n}\n","import { swap } from \"./util\";\n\nvar addToHistory;\n\nexport function sort(props) {\n    addToHistory = props.addToHistory;\n    const sortedArray = selectionSort(props.array);\n    addToHistory({array: sortedArray.slice(), highlights: []});\n    return sortedArray.slice();\n}\n\nfunction selectionSort(array){\n    if (array.length <= 1) {return array};\n    let length = array.length;\n\n    for (let startIndex = 0; startIndex < length; startIndex++){\n        let minVal = array[startIndex];\n        let minIndex = startIndex;\n        for (let i = startIndex; i < length; i++){\n            addToHistory({array: array.slice(), highlights: [startIndex, i, minIndex]})\n            if (minVal > array[i]){\n                minVal = array[i];\n                minIndex = i;\n            }\n        }\n\n        addToHistory({array: array.slice(), highlights: [startIndex, minIndex]});\n        swap(array, startIndex, minIndex);\n        addToHistory({array: array.slice(), highlights: [startIndex, minIndex]});\n    }\n    return array;\n}\n","var addToHistory;\n\nexport function sort(props) {\n    addToHistory = props.addToHistory;\n    const sortedArray = shellSort(props.array);\n    addToHistory({array: sortedArray.slice(), highlights: []});\n    return sortedArray.slice();\n}\n\nfunction shellSort(array) {\n    // Generate gaps sequence\n    let h = 1;\n    while (h < array.length) {\n        h = 3*h +1;\n    }\n\n    while (h > 1) {\n        h = Math.floor(h/3);\n        for (let i = h; i < array.length; i++) {\n            let key = array[i];\n            let j = i;\n            addToHistory({array: array.slice(), highlights: [i, j-h]});\n            while (key < array[j-h]) {\n                array[j] = array[j-h];\n                addToHistory({array: array.slice(), highlights: [j, j-h]});\n                j = j-h;\n                if (j < h) break;\n            }\n            array[j] = key;\n        }\n    }\n    return array;\n}\n","// About half of the code in this file was borrowed from\n// https://www.geeksforgeeks.org/timsort/\n\nimport { range, swap } from \"./util\";\n\nvar addToHistory;\n\nexport function sort(props) {\n    addToHistory = props.addToHistory;\n    const sortedArray = timSort(props.array);\n    addToHistory({array: sortedArray.slice(), highlights: []});\n    return sortedArray.slice();\n}\n\nconst MIN_MERGE = 16;\n\nfunction timSort(array) {\n    let n = array.length;\n    const minRun = calculateMinRun(n);\n\n    for (let start = 0; start < n; start += minRun) {\n        const end = Math.min(start + minRun - 1, n - 1);\n        insertionSort(array, start, end);\n        // Show the section that has just been sorted\n        addToHistory({array: array.slice(), highlights: range(start, end+1)});\n    }\n\n    let size = minRun;\n    while (size < n) {\n        for (let start = 0; start < n; start += 2 * size) {\n            const split = Math.min(n - 1, start + size - 1);\n            const end = Math.min((start + 2 * size - 1), (n - 1));\n            if (split < end) {\n                // Only merge the left and right arrays if elements are out of order.\n                if (array[split] >= array[split+1]) {\n                    merge(array, start, split, end);\n                }\n                // Show the section that has just been sorted\n                addToHistory({array: array.slice(), highlights: range(start, end+1)});\n            }\n        }\n        size *= 2;\n    }\n    return array;\n}\n\n// Find the minimum run length that's optimal for merging\nfunction calculateMinRun(n) {\n    let r = 0;\n    while (n >= MIN_MERGE) {\n        r |= (n & 1);\n        n >>= 1;\n    }\n    return n + r;\n}\n\nfunction insertionSort(array, start, end) {\n    if (end <= start) return array;\n    // Sort the section using insertion method\n    for (let i = start+1; i < end+1; i++) {\n        let j = i;\n        addToHistory({array: array.slice(), highlights: [j-1, j]});\n        while (j > start && array[j] < array[j-1]) {\n            swap(array, j-1, j);\n            addToHistory({array: array.slice(), highlights: [j-1, j]});\n            j--;\n        }\n    }\n    return array;\n}\n\nfunction merge(array, start, split, end) {\n    if (end <= start) return array;\n\n    let mergeArray = [];\n    let i = start, j = split+1;\n    while (i <= split && j <= end) {\n        addToHistory({array: array.slice(), highlights: [i, j]});\n        if (array[i] <= array[j]) {\n            mergeArray.push(array[i++]);\n        } else {\n            mergeArray.push(array[j++]);\n        }\n    }\n\n    while (i <= split) {\n        addToHistory({array: array.slice(), highlights: [i, j-1]});\n        mergeArray.push(array[i++]);\n    }\n    while (j <= end) {\n        addToHistory({array: array.slice(), highlights: [i-1, j]});\n        mergeArray.push(array[j++]);\n    }\n\n    for (let k = 0; k < mergeArray.length; k++) {\n        addToHistory({array: array.slice(), highlights: [start+k]});\n        array[start+k] = mergeArray[k];\n    }\n\n    return array;\n}\n","// import { sort as bogoSort } from './bogoSort';\nimport { sort as bubbleSort } from './bubbleSort';\nimport { sort as cocktailShakerSort } from './cocktailShakerSort';\nimport { sort as gnomeSort } from './gnomeSort';\nimport { sort as heapSort } from './heapSort';\nimport { sort as insertionSort } from './insertionSort';\nimport { sort as introSort } from './introSort';\nimport { sort as mergeSort } from './mergeSort';\nimport { sort as quickSort } from './quickSort';\nimport { sort as quickSortOptimized } from './quickSortOptimized';\nimport { sort as selectionSort } from './selectionSort';\nimport { sort as shellSort } from './shellSort';\nimport { sort as timSort } from './timSort';\n\nconst MIN_ARRAY_SIZE = 50;\nconst MAX_ARRAY_SIZE = 100;\nconst TEST_RUNS = 200;\nconst MIN_VALUE = -2000;\nconst MAX_VALUE = 2000;\n\nexport function testSortingAlgorithms() {\n    var success = true;\n    console.log(\"Testing Bubble Sort:\");\n    if (!testSort(bubbleSort)) success = false;\n    console.log(\"Testing Cocktail Shaker Sort:\");\n    if (!testSort(cocktailShakerSort)) success = false;\n    console.log(\"Testing Gnome Sort:\");\n    if (!testSort(gnomeSort)) success = false;\n    console.log(\"Testing Heap Sort:\");\n    if (!testSort(heapSort)) success = false;\n    console.log(\"Testing Insertion Sort:\");\n    if (!testSort(insertionSort)) success = false;\n    console.log(\"Testing Intro Sort:\");\n    if (!testSort(introSort)) success = false;\n    console.log(\"Testing Merge Sort:\");\n    if (!testSort(mergeSort)) success = false;\n    console.log(\"Testing Quick Sort:\");\n    if (!testSort(quickSort)) success = false;\n    console.log(\"Testing Quick Sort Optimized:\");\n    if (!testSort(quickSortOptimized)) success = false;\n    console.log(\"Testing Selection Sort:\");\n    if (!testSort(selectionSort)) success = false;\n    console.log(\"Testing Shell Sort:\");\n    if (!testSort(shellSort)) success = false;\n    console.log(\"Testing Tim Sort:\");\n    if (!testSort(timSort)) success = false;\n\n    if (success) console.log(\"All tests completed successfully. Dope!\");\n    else console.log(\"Testing failed, try again human.\");\n}\n    \nfunction testSort(sortingAlgorithm) {\n    var success = true;\n    for (let i = 0; i < TEST_RUNS; i++) {\n        const array = randomArray();\n        const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n        const mySortedArray = sortingAlgorithm({\n            array: array.slice(), \n            range: [0, array.length-1], \n            addToHistory: () => {},\n        });\n        if (!arraysAreEqual(javaScriptSortedArray, mySortedArray)) {\n            success = false;\n        }\n        console.log(success);\n    }\n    return success;\n}\n\nfunction randomArray() {\n    const array = [];\n    const length = randomIntFromInterval(MIN_ARRAY_SIZE, MAX_ARRAY_SIZE);\n    for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(MIN_VALUE, MAX_VALUE));\n    }\n    return array.slice();\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max-min+1) + min);\n}\n\nfunction arraysAreEqual(array1, array2) {\n    if (array1.length !== array2.length) {\n        return false;\n    }\n    for (let i = 0; i < array1.length; i++) {\n        if (array1[i] !== array2[i]) return false;\n    }\n    return true;\n}\n","import { range, isSorted } from './util';\n\nvar addToHistory;\n\nexport function sort(props) {\n    addToHistory = props.addToHistory;\n    // The size of input for bogoSort is limited to 7 due to the factorial growth.\n    if (props.array.length > 7) return props.array.slice();\n    const sortedArray = bogoSort(props.array);\n    addToHistory({array: sortedArray.slice(), highlights: []});\n    return sortedArray.slice();\n}\n\nfunction bogoSort(array) {\n    let permutations = perm(array);\n    for (let i = 0; i < permutations.length; i++) {\n        addToHistory({array: permutations[i], highlights: range(0, array.length)});\n        if (isSorted(permutations[i])) {\n            return permutations[i];\n        }\n    }\n}\n\n// Generate permutations of an array, returns an array of arrays\n// https://stackoverflow.com/questions/37579994/generate-permutations-of-javascript-array\nfunction perm(xs) {\n    let output = [];\n  \n    for (let i = 0; i < xs.length; i = i + 1) {\n        let rest = perm(xs.slice(0, i).concat(xs.slice(i + 1)));\n    \n        if(!rest.length) {\n            output.push([xs[i]])\n        } else {\n            for(let j = 0; j < rest.length; j = j + 1) {\n            output.push([xs[i]].concat(rest[j]))\n            }\n        }\n    }\n    return output;\n}\n","import React from 'react';\nimport { DropdownButton, Dropdown} from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport styles from \"../styles/Selector.module.scss\"\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nimport \"../styles/custom-dropdown.css\"\n\nimport { useState } from 'react';\nimport { styled, Button } from '@material-ui/core';\n\nimport { BOGO_SORT, BUBBLE_SORT, COCKTAIL_SORT, GNOME_SORT, HEAP_SORT, INSERTION_SORT, INTRO_SORT, \n    MERGE_SORT, QUICK_SORT, QUICK_SORT_OPTIMIZED, SELECTION_SORT, SHELL_SORT, TIM_SORT } \n    from '../SortingVisualizer/SortingVisualizer';\n\nimport { RANDOM_ARRAY, STEADY_ARRAY, SORTED_ARRAY, REVERSE_SORTED_ARRAY, UNIFORM_ARRAY, PARTIAL_UNIFORM_ARRAY } from '../SortingVisualizer/SortingVisualizer';\n\nconst StyledButton = styled(Button)({\n    marginRight: \"5%\",\n    fontFamily: \"monospace\",\n    fontSize: \"17px\",\n    textAlign: \"center\",\n    textTransform: \"uppercase\",\n    backgroundSize: \"200% auto\",\n    transition: \"0.25s ease-in\",\n    color: \"#FFF\",\n    width: \"200px\",\n    boxShadow: \"0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)\",\n    cursor: \"pointer\",\n    backgroundImage: \"linear-gradient(90deg, #00d2ff 0%, #3a7bd5 0%, #00d2ff 60%)\",\n\n    '&:hover':{\n        backgroundPosition: \"right bottom\",\n    }\n})\n\nconst StyledButton2 = styled(StyledButton)({\n    backgroundImage: \"linear-gradient(90deg, #00d2ff 0%, #3a7bd5 0%, #00d2ff 60%)\",\n    '&:hover':{\n        backgroundPosition: \"right bottom\",\n    }\n})\n\nconst PauseButton = styled(StyledButton)({\n    backgroundImage: \"linear-gradient(90deg, #00d2ff 0%, #3a7bd5 0%, #00d2ff 60%)\",\n    '&:hover':{\n        backgroundPosition: \"right bottom\",\n    }\n})\n\nconst ResumeButton = styled(StyledButton)({\n    backgroundImage: \"linear-gradient(90deg, #00d2ff 0%, #3a7bd5 0%, #00d2ff 60%)\",\n    '&:hover':{\n        backgroundPosition: \"right bottom\",\n    }\n})\n\n// const buttonStyle = {marginBottom: \"2%\"}\n\nexport const Selector = (props) => {\n\n    const [inputType, setInputType] = useState(STEADY_ARRAY);\n    const [sortType, setSortType] = useState(QUICK_SORT);\n\n    function changeInput(type){\n        setInputType(type);\n        props.onChangeInput(type);\n    };\n\n    function changeSort(type){\n        setSortType(type);\n        props.onChangeSort(type);\n    };\n\n    return(\n        <div className = {styles.container}>\n            <div className = {styles.sliders}>\n                <div className = {styles.sliderDropdown}>\n                    <Typography gutterBottom style = {{fontFamily: \"monospace\", color: \"white\", marginTop: \"1%\", marginRight: \"4%\"}}>\n                        Array\n                    </Typography>\n                    <DropdownButton id=\"dropdown-basic-button\" title={inputType} style = {{width: \"53%\"}}>\n                        <Dropdown.Item onClick = {() => changeInput(STEADY_ARRAY)}>{STEADY_ARRAY}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeInput(RANDOM_ARRAY)}>{RANDOM_ARRAY}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeInput(SORTED_ARRAY)}>{SORTED_ARRAY}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeInput(REVERSE_SORTED_ARRAY)}>{REVERSE_SORTED_ARRAY}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeInput(UNIFORM_ARRAY)}>{UNIFORM_ARRAY}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeInput(PARTIAL_UNIFORM_ARRAY)}>{PARTIAL_UNIFORM_ARRAY}</Dropdown.Item>\n                    </DropdownButton>\n                    <Typography gutterBottom style = {{fontFamily: \"monospace\", color: \"white\", marginLeft: \"4%\", marginRight: \"3%\"} }>\n                        Array Size\n                    </Typography>\n                    <Slider\n                        onChange = {(e, val) => {props.onChangeSize(val, inputType)}}\n                        defaultValue={(props.disableSlider)? 7 : 100}\n                        valueLabelDisplay=\"auto\"\n                        disabled = {props.disableSlider}\n                        step={1}\n                        min={5}\n                        max={100}\n                    />\n                </div>\n                <div className = {styles.sliderDropdown}>\n                    <Typography gutterBottom style = {{fontFamily: \"monospace\", color: \"white\", marginTop: \"1%\", marginRight: \"5%\"}}>\n                        Sort\n                    </Typography>\n                    <DropdownButton id=\"dropdown-basic-button\" title={sortType} style = {{width: \"61%\"}}>\n                        <Dropdown.Header>Simple Sorting Algorithms</Dropdown.Header>\n                        <Dropdown.Item onClick = {() => changeSort(BOGO_SORT)}>{BOGO_SORT}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeSort(BUBBLE_SORT)}>{BUBBLE_SORT}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeSort(COCKTAIL_SORT)}>{COCKTAIL_SORT}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeSort(GNOME_SORT)}>{GNOME_SORT}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeSort(INSERTION_SORT)}>{INSERTION_SORT}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeSort(SELECTION_SORT)}>{SELECTION_SORT}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeSort(SHELL_SORT)}>{SHELL_SORT}</Dropdown.Item>\n\n                        <Dropdown.Header>Better Sorting Algorithms</Dropdown.Header>\n                        <Dropdown.Item onClick = {() => changeSort(HEAP_SORT)}>{HEAP_SORT}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeSort(MERGE_SORT)}>{MERGE_SORT}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeSort(QUICK_SORT)}>{QUICK_SORT}</Dropdown.Item>\n\n                        <Dropdown.Header>Hybrid/Optimized Sorting Algorithms</Dropdown.Header>\n                        <Dropdown.Item onClick = {() => changeSort(QUICK_SORT_OPTIMIZED)}>Quick Sort (Optimized)</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeSort(INTRO_SORT)}>{INTRO_SORT}</Dropdown.Item>\n                        <Dropdown.Item onClick = {() => changeSort(TIM_SORT)}>{TIM_SORT}</Dropdown.Item>\n                    </DropdownButton>\n                    <Typography gutterBottom style = {{fontFamily: \"monospace\", color: \"white\", marginRight: \"2%\"}}>\n                        Sorting Speed\n                    </Typography>\n                    <Slider\n                        onChange = {(e, val) => {props.onChangeSpeed(val)}}\n                        defaultValue={100}\n                        valueLabelDisplay=\"auto\"\n                        step={1}\n                        min={1}\n                        max={100}\n                    />\n                </div>\n            </div>\n            <div className = {styles.buttons}>\n                <StyledButton style = {styles.buttonStyle} onClick = {() => { props.pause(); props.sort(); }}>Run</StyledButton>\n                <PauseButton style = {styles.buttonStyle} onClick = {() => { props.pause(); }}>Pause</PauseButton>\n                <ResumeButton style = {styles.buttonStyle} onClick = {() => { props.resume(); }}>Resume</ResumeButton>              \n                <StyledButton2 style = {styles.buttonStyle} onClick = {() => { props.reset(); }}>Reset</StyledButton2>\n            </div>\n            \n        </div>\n    )\n}\n","import React from 'react';\n\nimport { generateRandomArray, generateSteadyArray, generateSortedArray, \n    generateReverseSortedArray, generateUniformArray, generatePartialUniformArray\n} from '../sortingAlgorithms/util';\nimport { testSortingAlgorithms } from '../sortingAlgorithms/SortingTester';\nimport { sort as bogoSort } from '../sortingAlgorithms/bogoSort';\nimport { sort as bubbleSort } from '../sortingAlgorithms/bubbleSort';\nimport { sort as cocktailShakerSort } from '../sortingAlgorithms/cocktailShakerSort';\nimport { sort as gnomeSort } from '../sortingAlgorithms/gnomeSort';\nimport { sort as heapSort } from '../sortingAlgorithms/heapSort';\nimport { sort as insertionSort } from '../sortingAlgorithms/insertionSort';\nimport { sort as introSort } from '../sortingAlgorithms/introSort';\nimport { sort as mergeSort } from '../sortingAlgorithms/mergeSort';\nimport { sort as quickSort } from '../sortingAlgorithms/quickSort';\nimport { sort as quickSortOptimized } from '../sortingAlgorithms/quickSortOptimized';\nimport { sort as selectionSort } from '../sortingAlgorithms/selectionSort';\nimport { sort as shellSort } from '../sortingAlgorithms/shellSort';\nimport { sort as timSort } from '../sortingAlgorithms/timSort';\n\n// import { StyledButton } from '../components/NavBar';\nimport { Selector } from '../components/SortingSelector';\nimport styles from './SortingVisualizer.module.scss';\n\nexport const BOGO_SORT = \"Bogo Sort\";\nexport const BUBBLE_SORT = \"Bubble Sort\";\nexport const COCKTAIL_SORT = \"Cocktail Shaker Sort\";\nexport const GNOME_SORT = \"Gnome Sort\";\nexport const HEAP_SORT = \"Heap Sort\";\nexport const INSERTION_SORT = \"Insertion Sort\";\nexport const INTRO_SORT = \"Intro Sort\";\nexport const MERGE_SORT = \"Merge Sort\";\nexport const QUICK_SORT = \"Quick Sort\";\nexport const QUICK_SORT_OPTIMIZED = \"Quick Sort Optimized\";\nexport const SELECTION_SORT = \"Selection Sort\";\nexport const SHELL_SORT = \"Shell Sort\";\nexport const TIM_SORT = \"Tim Sort\";\n\nexport const RANDOM_ARRAY = \"Random Array\";\nexport const STEADY_ARRAY = \"Steady Random Array\";\nexport const SORTED_ARRAY = \"Sorted Array\";\nexport const REVERSE_SORTED_ARRAY = \"Reverse Sorted Array\";\nexport const UNIFORM_ARRAY = \"Uniform Array\";\nexport const PARTIAL_UNIFORM_ARRAY = \"Partial Uniform Array\";\n\nconst MAX_ARRAY_SIZE = 100;\nconst MIN_VALUE = 5;\nconst MAX_VALUE = 505;\n\nconst INITIAL_ANIMATION_PAUSE_TIME = 10;\nconst INITIAL_ANIMATION_SPEED = 100;\nconst MAX_ANIMATION_PAUSE = 510;\nconst ANIMATION_PAUSE_RANGE = 500;\n\nconst PRIMARY_COLOR = '#00a1c9';\nconst HIGHLIGHT_COLOR = '#832380';\n\nconst BOGO_SORT_ARRAY_SIZE = 7;\n\nvar TESTING = true;\n\nfunction Bar(props) {\n    var color = PRIMARY_COLOR;\n    if (props.highlighted) {\n        color = HIGHLIGHT_COLOR;\n    }\n    return (\n        <div \n            className={styles.arrayBar} \n            key={props.idx}\n            style={{height: `${props.value}px`, backgroundColor: color}}>\n        </div>    \n    );\n}\n\nclass Array extends React.Component {\n    renderBar(i) {\n        let highlighted = this.props.highlights.includes(i);\n        return (\n            <Bar\n                value={this.props.array[i]}\n                idx={i}\n                highlighted={highlighted}\n                key={i}\n            />\n        )\n    }\n\n    render() {\n        var bars = [];\n        let i;\n        for (i=0; i < this.props.array.length; i++) {\n            bars.push(this.renderBar(i));\n        }\n        // Redundant invisible bar at the end of the array container\n        // to maintain the height of the array container during animations\n        bars.push(<div \n            className={styles.arrayBar}\n            style={{height: MAX_VALUE + 30, backgroundColor: \"black\"}}\n            key={i}\n            >\n        </div>)\n\n        return (\n            <div className={styles.array}>\n                {bars}\n            </div>\n        )\n    }\n}\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            array: [],\n            arraySize: MAX_ARRAY_SIZE,\n            arrayType: STEADY_ARRAY,\n            highlights: [],\n\n            sort: quickSort,\n            timeoutIDArray: [],\n            resumePoint: 0,\n            disableSlider: false,\n            animationSpeed: INITIAL_ANIMATION_SPEED,\n            animationPauseTime: INITIAL_ANIMATION_PAUSE_TIME\n        };\n\n        this.history = [];\n\n        this.addToHistory = (props) => {\n            this.history.push({\n                array: props.array.slice(), \n                highlights: props.highlights.slice()\n            });\n        };\n\n        this.clearHistory = () => {\n            this.history = [];\n        }\n\n        this.clearForwardHistory = () => {\n            this.history = this.history.slice(0, this.state.resumePoint+1);\n        }\n\n        this.generateArray = this.generateArray.bind(this);\n        this.changeSort = this.changeSort.bind(this);\n        this.doSort = this.doSort.bind(this);\n        this.reset = this.reset.bind(this);\n        this.pause = this.pause.bind(this);\n        this.resume = this.resume.bind(this);\n        this.onChangeArraySize = this.onChangeArraySize.bind(this);\n        this.onChangeSortSpeed = this.onChangeSortSpeed.bind(this);\n    }\n\n    componentDidMount() {\n        this.generateArray(this.state.arrayType);\n        if (TESTING) { testSortingAlgorithms(); }\n    }\n\n    componentWillUnmount() {\n        this.setState({array: []});\n        this.clearHistory();\n    }\n\n    changeSort(sortType){\n        if (sortType === BOGO_SORT){\n            this.reset();\n            this.generateArray(this.state.arrayType, BOGO_SORT_ARRAY_SIZE);\n            this.setState({disableSlider: true});\n        } \n        else {\n            if (this.state.disableSlider) {\n                this.reset();\n                this.generateArray(this.state.arrayType, MAX_ARRAY_SIZE);\n                this.setState({disableSlider: false});\n            }\n        }\n\n        switch (sortType) {\n            case BOGO_SORT:\n                this.setState({sort: bogoSort});\n                break;\n            case BUBBLE_SORT:\n                this.setState({sort: bubbleSort});\n                break;\n            case COCKTAIL_SORT:\n                this.setState({sort: cocktailShakerSort});\n                break;\n            case GNOME_SORT:\n                this.setState({sort: gnomeSort});\n                break;\n            case HEAP_SORT:\n                this.setState({sort: heapSort});\n                break;\n            case INSERTION_SORT:\n                this.setState({sort: insertionSort});\n                break;\n            case INTRO_SORT:\n                this.setState({sort: introSort});\n                break;\n            case MERGE_SORT:\n                this.setState({sort: mergeSort});\n                break;\n            case QUICK_SORT:\n                this.setState({sort: quickSort});\n                break;\n            case QUICK_SORT_OPTIMIZED:\n                this.setState({sort: quickSortOptimized});\n                break;\n            case SELECTION_SORT:\n                this.setState({sort: selectionSort});\n                break;\n            case SHELL_SORT:\n                this.setState({sort: shellSort});\n                break;\n            case TIM_SORT:\n                this.setState({sort: timSort});\n                break;\n            default:\n                break;\n        }\n    }\n\n    generateArray(arrayType, arraySize) {\n        if (!arraySize) arraySize = this.state.arraySize;\n        this.pause();\n        this.clearHistory();\n        let array = [];\n        switch (arrayType) {\n            case RANDOM_ARRAY:\n                array = generateRandomArray(arraySize, MIN_VALUE, MAX_VALUE);\n                break;\n            case STEADY_ARRAY:\n                array = generateSteadyArray(arraySize, MIN_VALUE, MAX_VALUE);\n                break;\n            case SORTED_ARRAY:\n                array = generateSortedArray(arraySize, MIN_VALUE, MAX_VALUE);\n                break;\n            case REVERSE_SORTED_ARRAY:\n                array = generateReverseSortedArray(arraySize, MIN_VALUE, MAX_VALUE);\n                break;\n            case UNIFORM_ARRAY:\n                array = generateUniformArray(arraySize, MIN_VALUE, MAX_VALUE);\n                break;\n            case PARTIAL_UNIFORM_ARRAY:\n                array = generatePartialUniformArray(arraySize, MIN_VALUE, MAX_VALUE);\n                break;\n            default:\n                break;\n        }\n        this.setState({array: array, highlights: [], arraySize: arraySize, arrayType: arrayType});\n    }\n\n    reset() {\n        if (this.history.length > 0) {\n            const originalArray = this.history[0].array.slice();\n            this.pause();\n            this.clearHistory();\n            this.setState({array: originalArray, highlights: [], resumePoint: 0});\n        }\n    }\n\n    pause() {\n        let arrLen = this.state.timeoutIDArray.length;\n        let i = 0;\n        while (i < arrLen) {\n            clearTimeout(this.state.timeoutIDArray[i++]);\n        }\n        // this.setState({timeoutIDArray: []});\n    }\n\n    resume() {\n        this.pause();\n        this.animateHistory(this.state.resumePoint);\n    }\n\n    animateHistory(startPoint) {\n        if (!startPoint) startPoint = 0;\n        var animationPauseTime;\n        var count = 1;\n        for (let i = startPoint; i < this.history.length; i++) {\n            animationPauseTime = this.state.animationPauseTime * count;\n            let timeoutID = setTimeout(() => {this.setState({array: this.history[i].array, highlights: this.history[i].highlights, resumePoint: i+1})}, animationPauseTime);\n            this.state.timeoutIDArray.push(timeoutID);\n            count++;\n        }\n    }\n\n    doSort() {\n        this.pause();\n        this.clearForwardHistory();\n        // this.clearHistory();\n        this.state.sort({array: this.state.array, addToHistory: this.addToHistory});\n        this.animateHistory(this.state.resumePoint);\n    }\n\n    onChangeArraySize(arraySize) {\n        if (this.state.arraySize !== arraySize) {\n            this.generateArray(this.state.arrayType, arraySize);\n        }\n    }\n\n    onChangeSortSpeed(speed) {\n        if (this.state.animationSpeed !== speed) {\n            const percentageSpeed = speed/100;\n            var animationPauseTime = MAX_ANIMATION_PAUSE - (ANIMATION_PAUSE_RANGE * percentageSpeed);\n            this.setState({animationSpeed: speed, animationPauseTime: animationPauseTime});\n            this.pause();\n            this.animateHistory(this.state.resumePoint);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Selector onChangeInput = {this.generateArray} onChangeSort = {this.changeSort} sort = {this.doSort}\n                reset = {this.reset} pause = {this.pause} resume = {this.resume} onChangeSize = {this.onChangeArraySize}\n                onChangeSpeed = {this.onChangeSortSpeed} disableSlider={this.state.disableSlider}/>\n                <div className = {styles.arrayContainer}>\n                    <Array\n                        array={this.state.array}\n                        highlights={this.state.highlights}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport styles from \"../styles/App.module.scss\"\nimport FadeIn from 'react-fade-in';\nconsole.log(styles)\n\nexport const WelcomeHeader = (props) => {\n    return(\n        <div className = {styles.welcomediv}>\n            <FadeIn delay = {300}>\n                <h1 className = {styles.welcome2}>sortify.io</h1> \n            </FadeIn>\n        </div>\n    )\n}","import React from \"react\";\nimport styles from '../styles/NavBar.module.scss';\nimport { styled } from '@material-ui/core/styles';\nimport { Button } from \"@material-ui/core\";\nimport {AiOutlineGithub} from '@react-icons/all-files/ai/AiOutlineGithub';\nimport { WelcomeHeader } from './WelcomeHeader';\n\nexport const Bar = (props) => {\n    return(\n        <div className = {styles.navbar}>     \n            <h2 className = {styles.author}>By: Tony & Ley</h2>\n            <WelcomeHeader/>\n            <div className = {styles.icons}>\n                <a href =\"https://github.com/ilaylow\"><AiOutlineGithub size = {55} style = {{marginRight: \"2.5%\"}}/></a>\n                <a href = \"https://github.com/CodingPengwing\"><AiOutlineGithub size = {55}/></a>\n            </div>\n        </div>\n    )\n}\n\nexport const StyledButton = styled(Button)({\n    color: \"white\",\n    backgroundColor: \"black\",\n    marginRight: \"2.5%\",\n    marginTop: \"2.5%\",\n    padding: \"0.5% 2%\",\n    transition: \"ease-in 0.2s\",\n\n    '&:hover': {\n        backgroundColor: \"white\",\n        color: \"black\",\n    }\n})","import AppStyles from './styles/App.module.scss';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport {Bar} from './components/NavBar';\n\nexport default function App() {\n  return (\n    <div className={AppStyles.App}>\n      <Bar/>\n      <SortingVisualizer/>\n\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}